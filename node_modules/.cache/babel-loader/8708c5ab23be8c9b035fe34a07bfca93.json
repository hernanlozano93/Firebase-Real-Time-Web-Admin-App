{"ast":null,"code":"import _objectSpread from \"/home/sony/CACTUS/Firebase-Real-Time-Web-Admin-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { observable, computed, action, decorate, runInAction } from \"mobx\";\nimport { get, set, entries, remove } from \"mobx\";\nimport * as firebaseService from \"./firebaseService\";\nexport class Store {\n  constructor() {\n    this.handleAuthedUser = async _authUser => {\n      if (_authUser) {\n        let userAcctInfo = await firebaseService.getUserProfile();\n        console.log(\"setting active user\");\n        this.activeUser = _objectSpread({}, _authUser, userAcctInfo);\n      } else {\n        this.activeUser = _authUser;\n      }\n\n      return this.activeUser;\n    };\n\n    this.activeUser = null;\n    this.loading = false;\n    this.authCheckComplete = false;\n    this.items = new Map();\n    this.initializationError = null;\n    this.initializeStore().then(u => {\n      this.activeUser = u;\n      this.authCheckComplete = true;\n    });\n  }\n  /**\n   * if we have an authenticated user then get all of the profile\n   * information from the database and associate it with the active\n   * user\n   * @param {*} _authUser\n   */\n\n\n  /**\n   * check to see if we have a user before starting up\n   */\n  async initializeStore() {\n    return firebaseService.authCheck(this.handleAuthedUser).then(_user => {\n      return _user;\n    }).catch(e => {\n      return runInAction(() => {\n        this.initializationError = e;\n      });\n    });\n  }\n\n  get doCheckAuth() {\n    if (firebaseService.getCurrentUser()) {\n      return this.activeUser;\n    } else {\n      return null;\n    }\n  }\n\n  doLogin(_username, _password) {\n    debugger;\n\n    if (_username.length) {\n      return firebaseService.loginWithEmail(_username, _password).then(_result => {\n        return true;\n      }, err => {\n        console.log(err);\n        return err;\n      }).catch(e => {\n        console.log(e);\n        return e;\n      });\n    }\n  }\n\n  doLogout() {\n    this.activeUser = null;\n    return firebaseService.logOut();\n  }\n\n}\ndecorate(Store, {\n  // OBSERVABLES\n  activeUser: observable,\n  loading: observable,\n  authCheckComplete: observable,\n  items: observable,\n  initializationError: observable,\n  // COMPUTED\n  authenticatedUser: computed,\n  doCheckAuth: computed,\n  itemEntries: computed,\n  // ACTIONS\n  doCreateUser: action,\n  doLogin: action,\n  doLogout: action,\n  loadData: action,\n  itemByKey: action,\n  addItem: action,\n  deleteItem: action\n});","map":{"version":3,"sources":["/home/sony/CACTUS/Firebase-Real-Time-Web-Admin-App/src/store/index.js"],"names":["observable","computed","action","decorate","runInAction","get","set","entries","remove","firebaseService","Store","constructor","handleAuthedUser","_authUser","userAcctInfo","getUserProfile","console","log","activeUser","loading","authCheckComplete","items","Map","initializationError","initializeStore","then","u","authCheck","_user","catch","e","doCheckAuth","getCurrentUser","doLogin","_username","_password","length","loginWithEmail","_result","err","doLogout","logOut","authenticatedUser","itemEntries","doCreateUser","loadData","itemByKey","addItem","deleteItem"],"mappings":"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","sourcesContent":["import { observable, computed, action, decorate, runInAction } from \"mobx\";\nimport { get, set, entries, remove } from \"mobx\";\nimport * as firebaseService from \"./firebaseService\";\n\nexport class Store {\n  constructor() {\n    this.activeUser = null;\n    this.loading = false;\n    this.authCheckComplete = false;\n    this.items = new Map();\n    this.initializationError = null;\n\n    this.initializeStore().then(u => {\n      this.activeUser = u;\n      this.authCheckComplete = true;\n    });\n  }\n\n  /**\n   * if we have an authenticated user then get all of the profile\n   * information from the database and associate it with the active\n   * user\n   * @param {*} _authUser\n   */\n  handleAuthedUser = async _authUser => {\n    if (_authUser) {\n      let userAcctInfo = await firebaseService.getUserProfile();\n      console.log(\"setting active user\");\n      this.activeUser = { ..._authUser, ...userAcctInfo };\n    } else {\n      this.activeUser = _authUser;\n    }\n    return this.activeUser;\n  };\n\n  /**\n   * check to see if we have a user before starting up\n   */\n  async initializeStore() {\n    return firebaseService\n      .authCheck(this.handleAuthedUser)\n      .then(_user => {\n        return _user;\n      })\n      .catch(e => {\n        return runInAction(() => {\n          this.initializationError = e;\n        });\n      });\n  }\n\n  get doCheckAuth() {\n    if (firebaseService.getCurrentUser()) {\n      return this.activeUser;\n    } else {\n      return null;\n    }\n  }\n\n\n  doLogin(_username, _password) {\n    debugger;\n    if (_username.length) {\n      return firebaseService\n        .loginWithEmail(_username, _password)\n        .then(\n          _result => {\n            return true;\n          },\n          err => {\n            console.log(err);\n            return err;\n          }\n        )\n        .catch(e => {\n          console.log(e);\n          return e;\n        });\n    }\n  }\n\n\n\n  doLogout() {\n    this.activeUser = null;\n    return firebaseService.logOut();\n  }\n  \n}\n\ndecorate(Store, {\n  // OBSERVABLES\n  activeUser: observable,\n  loading: observable,\n  authCheckComplete: observable,\n  items: observable,\n  initializationError: observable,\n\n  // COMPUTED\n  authenticatedUser: computed,\n  doCheckAuth: computed,\n  itemEntries: computed,\n\n  // ACTIONS\n  doCreateUser: action,\n  doLogin: action,\n  doLogout: action,\n  loadData: action,\n  itemByKey: action,\n  addItem: action,\n  deleteItem: action\n});\n"]},"metadata":{},"sourceType":"module"}