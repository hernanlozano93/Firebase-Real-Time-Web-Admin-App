{"ast":null,"code":"import _objectSpread from \"/home/sony/CACTUS/Firebase-Real-Time-Web-Admin-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { observable, computed, action, decorate, runInAction } from \"mobx\";\nimport { entries } from \"mobx\";\nimport * as firebaseService from \"./firebaseService\";\nexport class Store {\n  constructor() {\n    this.handleAuthedUser = async _authUser => {\n      if (_authUser) {\n        let userAcctInfo = await firebaseService.getUserProfile();\n        console.log(\"setting active user\");\n        this.activeUser = _objectSpread({}, _authUser, userAcctInfo);\n      } else {\n        this.activeUser = _authUser;\n      }\n\n      return this.activeUser;\n    };\n\n    this.activeUser = null;\n    this.loading = false;\n    this.authCheckComplete = false;\n    this.initializationError = null;\n    this.initializeStore().then(u => {\n      this.activeUser = u;\n      this.authCheckComplete = true;\n    });\n  }\n\n  /**\n   * check to see if we have a user before starting up\n   */\n  async initializeStore() {\n    return firebaseService.authCheck(this.handleAuthedUser).then(_user => {\n      return _user;\n    }).catch(e => {\n      return runInAction(() => {\n        this.initializationError = e;\n      });\n    });\n  }\n\n  get doCheckAuth() {\n    if (firebaseService.getCurrentUser()) {\n      return this.activeUser;\n    } else {\n      return null;\n    }\n  }\n\n  get authenticatedUser() {\n    return this.activeUser || null;\n  }\n\n  get itemEntries() {\n    return entries(this.items);\n  }\n\n  doLogin(_username, _password) {\n    debugger;\n\n    if (_username.length) {\n      return firebaseService.loginWithEmail(_username, _password).then(_result => {\n        return true;\n      }, err => {\n        console.log(err);\n        return err;\n      }).catch(e => {\n        console.log(e);\n        return e;\n      });\n    }\n  }\n\n  doLogout() {\n    this.activeUser = null;\n    return firebaseService.logOut();\n  }\n\n}\ndecorate(Store, {\n  // OBSERVABLES\n  activeUser: observable,\n  loading: observable,\n  authCheckComplete: observable,\n  items: observable,\n  initializationError: observable,\n  // COMPUTED\n  authenticatedUser: computed,\n  doCheckAuth: computed,\n  // ACTIONS\n  doLogin: action,\n  doLogout: action\n});","map":{"version":3,"sources":["/home/sony/CACTUS/Firebase-Real-Time-Web-Admin-App/src/store/index.js"],"names":["observable","computed","action","decorate","runInAction","entries","firebaseService","Store","constructor","handleAuthedUser","_authUser","userAcctInfo","getUserProfile","console","log","activeUser","loading","authCheckComplete","initializationError","initializeStore","then","u","authCheck","_user","catch","e","doCheckAuth","getCurrentUser","authenticatedUser","itemEntries","items","doLogin","_username","_password","length","loginWithEmail","_result","err","doLogout","logOut"],"mappings":"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","sourcesContent":["import { observable, computed, action, decorate, runInAction } from \"mobx\";\nimport { entries } from \"mobx\";\nimport * as firebaseService from \"./firebaseService\";\n\nexport class Store {\n  constructor() {\n    this.activeUser = null;\n    this.loading = false;\n    this.authCheckComplete = false;\n    this.initializationError = null;\n\n    this.initializeStore().then(u => {\n      this.activeUser = u;\n      this.authCheckComplete = true;\n    });\n  }\n\n  handleAuthedUser = async _authUser => {\n    if (_authUser) {\n      let userAcctInfo = await firebaseService.getUserProfile();\n      console.log(\"setting active user\");\n      this.activeUser = { ..._authUser, ...userAcctInfo };\n    } else {\n      this.activeUser = _authUser;\n    }\n    return this.activeUser;\n  };\n\n  /**\n   * check to see if we have a user before starting up\n   */\n  async initializeStore() {\n    return firebaseService\n      .authCheck(this.handleAuthedUser)\n      .then(_user => {\n        return _user;\n      })\n      .catch(e => {\n        return runInAction(() => {\n          this.initializationError = e;\n        });\n      });\n  }\n\n  get doCheckAuth() {\n    if (firebaseService.getCurrentUser()) {\n      return this.activeUser;\n    } else {\n      return null;\n    }\n  }\n\n  get authenticatedUser() {\n    return this.activeUser || null;\n  }\n\n  get itemEntries() {\n    return entries(this.items);\n  }\n\n  doLogin(_username, _password) {\n    debugger;\n    if (_username.length) {\n      return firebaseService\n        .loginWithEmail(_username, _password)\n        .then(\n          _result => {\n            return true;\n          },\n          err => {\n            console.log(err);\n            return err;\n          }\n        )\n        .catch(e => {\n          console.log(e);\n          return e;\n        });\n    }\n  }\n\n\n\n  doLogout() {\n    this.activeUser = null;\n    return firebaseService.logOut();\n  }\n  \n}\n\ndecorate(Store, {\n  // OBSERVABLES\n  activeUser: observable,\n  loading: observable,\n  authCheckComplete: observable,\n  items: observable,\n  initializationError: observable,\n\n  // COMPUTED\n  authenticatedUser: computed,\n  doCheckAuth: computed,\n  \n\n  // ACTIONS\n  doLogin: action,\n  doLogout: action,\n  \n});\n"]},"metadata":{},"sourceType":"module"}